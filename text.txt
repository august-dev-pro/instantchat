<div className={`screen_${title}_content screen_dash_content`}>
  <SideNav />
  {title === "contacts" &&
    contacts &&
    contacts.length > 0 &&
    !selectedContact && (
      <div className="contacts">
        {contacts.map((contact: Contact) => (
          <div
            className={`contact chield`}
            key={contact.id}
            onClick={() => handleContactClick(contact)}
          >
            <div className="contact_pic picture">
              <img
                src={`../../../../images/contacts/${contact.profilePic}.jpeg`}
                alt="tod_descr"
              />
            </div>
            <div className="contact_desc description">
              <div className="name">{contact.name}</div>
              <div className="contact_phone_num">{contact.phoneNumber}</div>
            </div>
          </div>
        ))}
      </div>
    )}
  {title === "discuss" &&
    discuss &&
    discuss.length > 0 &&
    contacts &&
    !selectedDiscut &&
    discuss.map((discussion: any) => {
      // Trouver le contact correspondant à cette discussion
      const contact = contacts.find(
        (contact: any) =>
          contact.id === discussion.participants.user1Id ||
          discussion.participants.user2Id
      );

      // Si le contact est trouvé, afficher les détails de la discussion
      if (contact) {
        return (
          <div
            className={`discut chield`}
            key={discussion.id}
            onClick={() => {
              handleDiscussClick(discussion, contact);
              //  setIsChieldSelected(contact);
            }}
          >
            <div className="sender_profil picture">
              <img
                src={`../../../../images/contacts/${contact.profilePic}.jpeg`}
                alt="tod_descr"
              />
            </div>
            <div className="discuss_info description">
              <div className="sender_name">{contact.name}</div>
              <div className="last_message">
                {reduceMessage(getLastMessage(discussion.messages).text, 25)}
              </div>
            </div>
          </div>
        );
      }
    })}

  {selectedContact && (
    <div className="contact_show">
      <div className="show_profil_pic">
        <div className="picture">
          <img
            src={`../../../../images/contacts/${selectedContact.profilePic}.jpeg`}
            alt="tod_descr"
          />
        </div>
      </div>
      <div className="show_contact_desc">
        <div className="name">{selectedContact.name}</div>
        {/* <div className="status">status: {selectedContact.status}</div> */}
        <div className="actu-mot">
          <div className="phone">phone: {selectedContact.phoneNumber}</div>
          <div className="actu">{selectedContact.actu}</div>
        </div>
        <div className="quote-callActions">
          <div className="favorite-quote">{selectedContact.favoriteQuote}</div>
          <div className="callActions">
            <div className="delete-action">
              <FontAwesomeIcon icon={faTrash} />
            </div>
            <div className="send-message">
              <FontAwesomeIcon icon={faComment} />
            </div>
          </div>
        </div>
        {/* <div className="location">{selectedContact.location}</div> */}
      </div>
    </div>
  )}
  {selectedDiscut && selectedDiscutContact && (
    <div className="discussion_show">
      <div className="contact">
        <div className="back_action">
          <FontAwesomeIcon icon={faArrowLeftLong} />
        </div>
        <div className="profil_pic">
          <div className="picture">
            <img
              src={`../../../../images/contacts/${selectedDiscutContact.profilePic}.jpeg`}
              alt="tod_descr"
            />
          </div>
        </div>
        <div className="contact-des">
          <div className="name">{selectedDiscutContact.name}</div>
          <div className="phone">
            phone: {selectedDiscutContact.phoneNumber}
          </div>
        </div>
      </div>
      <div className="discussion_block">
        <div className="discussion">
          <div className="discussion_content">
            {selectedDiscut.messages
              .slice()
              .reverse()
              .map((message: any, index: any) => (
                <div
                  className={`message ${
                    message.status === "envoyé" ? "sent" : "received"
                  }`}
                  key={index}
                >
                  <div className="message_text">{message.text}</div>
                </div>
              ))}
          </div>
        </div>
        <div className="message-input">
          <div className="emoji">
            <FontAwesomeIcon icon={faSmile} />
          </div>
          {/* Zone de saisie de message */}
          <div className="espace-send">
            <textarea
              className="input"
              ref={textareaRef}
              //value={messageInput}
              onChange={handleMessageInputChange}
              placeholder="Tapez votre message ici..."
            ></textarea>
            {message != "" && (
              <div className="send-btn">
                <FontAwesomeIcon icon={faPaperPlane} />
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  )}
</div>;


          <div className={`content_show_section `}>
            {/* Contenu de la section discussion_show */}
            {selectedDiscut && selectedDiscutContact && (
              <div className="discussion_show">
                <div className="contact">
                  <div className="profil_pic">
                    <div className="picture">
                      <img
                        src={`../../../../images/contacts/${selectedDiscutContact.profilePic}.jpeg`}
                        alt="tod_descr"
                      />
                    </div>
                  </div>
                  <div className="name">{selectedDiscutContact.name}</div>
                  <div className="phone">
                    phone: {selectedDiscutContact.phoneNumber}
                  </div>
                </div>
                <div className="discussion_block">
                  <div className="discussion">
                    <div className="discussion_content">
                      {selectedDiscut.messages
                        .slice()
                        .reverse()
                        .map((message: any, index: any) => (
                          <div
                            className={`message ${
                              message.status === "envoyé" ? "sent" : "received"
                            }`}
                            key={index}
                          >
                            <div className="message_text">{message.text}</div>
                          </div>
                        ))}
                    </div>
                  </div>
                  <div className="message-input">
                    <div className="emoji">
                      <FontAwesomeIcon icon={faSmile} />
                    </div>
                    {/* Zone de saisie de message */}
                    <div className="espace-send">
                      <textarea
                        className="input"
                        ref={textareaRef}
                        //value={messageInput}
                        onChange={handleMessageInputChange}
                        placeholder="Tapez votre message ici..."
                      ></textarea>
                      {message != "" && (
                        <div className="send-btn">
                          <FontAwesomeIcon icon={faPaperPlane} />
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* Contenu de la section contact_show */}
            {selectedContact && (
              <div className="contact_show">
                <div className="show_profil_pic">
                  <div className="picture">
                    <img
                      src={`../../../../images/contacts/${selectedContact.profilePic}.jpeg`}
                      alt="tod_descr"
                    />
                  </div>
                </div>
                <div className="show_contact_desc">
                  <div className="name">{selectedContact.name}</div>
                  {/* <div className="status">status: {selectedContact.status}</div> */}
                  <div className="actu-mot">
                    <div className="phone">
                      phone: {selectedContact.phoneNumber}
                    </div>
                    <div className="actu">{selectedContact.actu}</div>
                  </div>
                  <div className="quote-callActions">
                    <div className="favorite-quote">
                      {selectedContact.favoriteQuote}
                    </div>
                    <div className="callActions">
                      <div className="delete-action">
                        <FontAwesomeIcon icon={faTrash} />
                      </div>
                      <div className="send-message">
                        <FontAwesomeIcon icon={faComment} />
                      </div>
                    </div>
                  </div>
                  {/* <div className="location">{selectedContact.location}</div> */}
                </div>
              </div>
            )}
          </div>

{title === "contacts" &&
                    contacts &&
                    contacts.length > 0 &&
                    contacts.map((contact: any) => (
                      <div
                        className={`contact chield ${
                          selectedContact && selectedContact.id === contact.id
                            ? "active"
                            : ""
                        }`}
                        key={contact.id}
                        onClick={() => handleContactClick(contact)}
                      >
                        <div className="contact_pic picture">
                          <img
                            src={`../../../../images/contacts/${contact.profilePic}.jpeg`}
                            alt="tod_descr"
                          />
                        </div>
                        <div className="contact_desc description">
                          <div className="name">{contact.username}</div>
                          <div className="contact_phone_num">
                            {contact.phoneNumber}
                          </div>
                        </div>
                      </div>
                    ))}



     // Trouver le contact correspondant à cette discussion
                      const contact = contacts.find(
                        (contact: any) => contact.id != user.uid
                      );

                      // Si le contact est trouvé, afficher les détails de la discussion
                      if (contact) {
                        return (
                          <div
                            className={`discut chield ${
                              selectedDiscut && selectedDiscut === discussion.id
                                ? "active"
                                : ""
                            }`}
                            key={discussion.id}
                            onClick={() =>
                              handleDiscussClick(discussion, contact)
                            }
                          >
                            {/*  <div className="sender_profil picture">
                              <img
                                src={`../../../../images/contacts/${contact.profilePic}.jpeg`}
                                alt="tod_descr"
                              />
                            </div> */}
                            <div className="discuss_info description">
                              <div className="sender_name">
                                {contact.username}
                              </div>
                              <div className="last_message">
                                {reduceMessage(
                                  getLastMessage(discussion.messages).text,
                                  25
                                )}
                              </div>
                            </div>
                          </div>
                        );
                      }
//////new
  {/* Contenu de la section discussion_show */}
            {selectedDiscut && selectedDiscutContact && (
              <div className="discussion_show">
                <div className="contact">
                  <div className="profil_pic">
                    <div className="picture">
                      <img
                        src={`../../../../images/contacts/lefa.jpeg`}
                        alt="tod_descr"
                      />
                    </div>
                  </div>
                  <div className="name">{selectedDiscutContact.userName}</div>
                  <div className="phone">
                    phone: {selectedDiscutContact.phone}
                  </div>
                </div>
                <div className="discussion_block">
                  <div className="discussion">
                    <div className="discussion_content">
                      {selectedDiscut?.messages.map(
                        (message: any, index: any) => (
                          <div
                            className={`message ${
                              message.senderId === user.uid
                                ? "sent"
                                : "received"
                            }`}
                            key={index}
                          >
                            <div className="message_text">
                              {message.content}
                            </div>
                          </div>
                        )
                      )}
                    </div>
                  </div>
                  <div className="message-input">
                    <div className="emoji">
                      <FontAwesomeIcon icon={faSmile} />
                    </div>
                    {/* Zone de saisie de message */}
                    <div className="espace-send">
                      <textarea
                        className="input"
                        ref={textareaRef}
                        //value={messageInput}
                        onChange={handleMessageInputChange}
                        placeholder="Tapez votre message ici..."
                      ></textarea>
                      {message != "" && (
                        <div
                          className="send-btn"
                          onClick={() => {
                            handleSendMessage(
                              user.uid,
                              message,
                              selectedDiscut.id
                            );
                          }}
                        >
                          <FontAwesomeIcon icon={faPaperPlane} />
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            )}



  /*   const message: Message = {
    senderId: "RVyciryyrNbtHDFUhvZSr1RxHKz1",
    content: "salut mon pote",
    writeDate: Timestamp.now().toDate().toDateString(),
    writeTime: Timestamp.now().toDate().toTimeString(),
  };

  writeMessage(message, "-NtGqGc9vPgGXto8qROj"); */
  const [newsData, setNewsData] = useState<any>(null);
  /* useEffect(() => {
    // return listenForDiscussions(setNewsData);
  }, [newsData]);
  console.log(`this is news data for times: ${newsData}`); */
  // Utilisation dans votre composant

  useEffect(() => {
    const unsubscribe = listenForDiscussions((discussionsData: any) => {
      // Mettez à jour newsData avec les données de discussion
      setNewsData(Object.values(discussionsData));
    });

    // Nettoyer l'écouteur lorsque le composant est démonté
    return () => unsubscribe();
  }, []);

  console.log("this is news data for times:", newsData);
 {selectedDiscut && selectedDiscutContact && (
              <div className="discussion_show">
                <div className="contact">
                  <div className="profil_pic">
                    <div className="picture">
                      <img
                        src={`../../../../images/contacts/lefa.jpeg`}
                        alt="tod_descr"
                      />
                    </div>
                  </div>
                  <div className="name">{selectedDiscutContact.userName}</div>
                  <div className="phone">
                    phone: {selectedDiscutContact.phone}
                  </div>
                </div>
                <div className="discussion_block">
                  <div className="discussion">
                    <div className="discussion_content">
                      {selectedDiscut?.messages.map(
                        (message: any, index: any) => (
                          <div
                            className={`message ${
                              message.senderId === user.uid
                                ? "sent"
                                : "received"
                            }`}
                            key={index}
                          >
                            <div className="message_text">
                              {message.content}
                            </div>
                          </div>
                        )
                      )}
                    </div>
                  </div>
                  <div className="message-input">
                    <div className="emoji">
                      <FontAwesomeIcon icon={faSmile} />
                    </div>
                    {/* Zone de saisie de message */}
                    <div className="espace-send">
                      <textarea
                        className="input"
                        ref={textareaRef}
                        //value={messageInput}
                        onChange={handleMessageInputChange}
                        placeholder="Tapez votre message ici..."
                      ></textarea>
                      {message != "" && (
                        <div
                          className="send-btn"
                          onClick={() => {
                            handleSendMessage(
                              user.uid,
                              message,
                              selectedDiscut.id
                            );
                          }}
                        >
                          <FontAwesomeIcon icon={faPaperPlane} />
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            )}



dash content

/* state d'affichage */
  const [messages, setmessages] = useState([]);
  const [isLoaded, setIsLoaded] = useState(true);
  const [selectedContact, setSelectedContact] = useState<any | null>(null);
  const [selectedDiscut, setSelectedDiscut] = useState<any | null>(null);
  const [selectedDiscutContact, setselectedDiscutContact] = useState<
    any | null
  >(null);
  const [message, setMessageInput] = useState<string>("");
  const textareaRef = useRef<HTMLTextAreaElement>(null);

  const handleMessageInputChange = (
    event: React.ChangeEvent<HTMLTextAreaElement>
  ) => {
    setMessageInput(event.target.value); // Mettre à jour le contenu de la zone de saisie de message
  };

  // Ajuster la hauteur de la zone de saisie en fonction de son contenu
  useEffect(() => {
    if (textareaRef.current) {
      // textareaRef.current.style.height = "auto"; // Réinitialiser la hauteur à auto pour recalculer la hauteur réelle
      textareaRef.current.style.height =
        textareaRef.current.scrollHeight + "px"; // Ajuster la hauteur en fonction du contenu

      if (message === "") {
        textareaRef.current.style.height = "35px";
      }
    }
  }, [message]);
  console.log(`messages: ${message}`);

  // Fonction pour gérer le clic sur un contact
  const handleContactClick = (contact: any) => {
    setSelectedContact(contact); // Mettre à jour le contact sélectionné
  };

  // Fonction pour gérer le clic sur une discussion
  const handleDiscussClick = (discussion: any, contact: any) => {
    setSelectedDiscut(discussion); // Mettre à jour la discussion sélectionnée
    setselectedDiscutContact(contact); // Mettre à jour le contact de la discussion
  };

  const [userData, setUserData] = useState<User | null>(null);
  const [user, setUser] = useState<any | null>(null);

  useEffect(() => {
    const auth = getAuth();
    const unsubscribe = auth?.onAuthStateChanged(async (user) => {
      if (user) {
        setUser(user);
        const userData = await readUserData(user.uid);
        setUserData(userData);
      } else {
        setUser(null);
        setUserData(null);
      }
    });
    return () => unsubscribe();
  }, []);


  //envoi de message
  const handleSendMessage = async (
    senderId: string,
    messageContent: string,
    discussId: string
  ) => {
    try {
      await sendMessage(senderId, messageContent, discussId);
      console.log("Message envoyé avec succès.");
    } catch (error) {
      console.error("Erreur lors de l'envoi du message :", error);
    }
  };
  const [discuss, setDiscuss] = useState<unknown[]>([]);
  useEffect(() => {
    listenForDiscussions(setDiscuss, setmessages);
    setIsLoaded(false);
  }, []);

  /*   console.log(messages); */


<div className={`aside_show`}>
            <div className="aside_show_container">
              <div className="aside_show_content">
                <div className="title">{title}</div>
                {/*  <div className="aside_chields">
                  {discuss &&
                    discuss.map((discussion: any, index: any) => {
                      // Trouver le contact correspondant à l'utilisateur actuel dans la discussion
                      const contact = contacts.find((contact: any) => {
                        return (
                          contact.id != user?.uid &&
                          (contact.id === discussion.participants.user1Id ||
                            contact.id === discussion.participants.user2Id) &&
                          (user?.uid === discussion.participants.user1Id ||
                            user?.uid === discussion.participants.user2Id)
                        );
                      });
                      // Afficher le contact correspondant
                      return contact ? (
                        <div
                          className={`discut chield ${
                            selectedDiscut &&
                            selectedDiscut.id === discussion.id
                              ? "active"
                              : ""
                          }`}
                          key={index}
                          onClick={() =>
                            handleDiscussClick(discussion, contact)
                          }
                        >
                          <div className="sender_profil picture">
                            <img
                              src={`../../../../images/contacts/lefa.jpeg`}
                              alt="tod_descr"
                            />
                          </div>
                          <div className="discuss_info description">
                            <div className="sender_name">
                              {contact.username}
                            </div>
                            <div className="last_message">
                              {reduceMessage(
                                getLastMessage(discussion.messages).content,
                                25
                              )}
                            </div>
                          </div>
                        </div>
                      ) : null;
                    })}
                </div> */}
                <div className="aside_chields">
                  {discuss &&
                    discuss.map((discussion: any, index: number) => {
                      // Trouver le contact correspondant à l'utilisateur actuel dans la discussion
                      const contact = contacts.find((contact: any) => {
                        return (
                          contact.id !== user?.uid &&
                          (contact.id === discussion.participants.user1Id ||
                            contact.id === discussion.participants.user2Id) &&
                          (user?.uid === discussion.participants.user1Id ||
                            user?.uid === discussion.participants.user2Id)
                        );
                      });
                      // Afficher le contact correspondant
                      return contact ? (
                        <div
                          className={`discut chield ${
                            selectedDiscut &&
                            selectedDiscut.id === discussion.id
                              ? "active"
                              : ""
                          }`}
                          key={index}
                          onClick={() =>
                            handleDiscussClick(discussion, contact)
                          }
                        >
                          <div className="sender_profil picture">
                            <img
                              src={`../../../../images/contacts/lefa.jpeg`}
                              alt="tod_descr"
                            />
                          </div>
                          <div className="discuss_info description">
                            <div className="sender_name">
                              {contact.username}
                            </div>
                            <div className="last_message"></div>
                          </div>
                        </div>
                      ) : null;
                    })}
                </div>
              </div>
            </div>
          </div>
          <div className={`content_show_section `}>
            {/* Contenu de la section discussion_show */}
            {selectedDiscut && selectedDiscutContact && (
              <div className="discussion_show">
                <div className="contact">
                  <div className="profil_pic">
                    <div className="picture">
                      <img
                        src={`../../../../images/contacts/lefa.jpeg`}
                        alt="tod_descr"
                      />
                    </div>
                  </div>
                  <div className="name">{selectedDiscutContact.userName}</div>
                  <div className="phone">
                    phone: {selectedDiscutContact.phone}
                  </div>
                </div>
                <div className="discussion_block">
                  <div className="discussion">
                    <div className="discussion_content">
                      {isLoaded
                        ? "chargement ..."
                        : Object.values(selectedDiscut.messages).map(
                            (message: any, index: number) => (
                              <div
                                className={`message ${
                                  message.senderId === user.uid
                                    ? "sent"
                                    : "received"
                                }`}
                                key={index}
                              >
                                <div className="message_text">
                                  {message.content}
                                </div>
                              </div>
                            )
                          )}
                    </div>
                  </div>
                  <div className="message-input">
                    <div className="emoji">
                      <FontAwesomeIcon icon={faSmile} />
                    </div>
                    {/* Zone de saisie de message */}
                    <div className="espace-send">
                      <textarea
                        className="input"
                        ref={textareaRef}
                        //value={messageInput}
                        onChange={handleMessageInputChange}
                        placeholder="Tapez votre message ici..."
                      ></textarea>
                      {message != "" && (
                        <div
                          className="send-btn"
                          onClick={() => {
                            /*  handleSendMessage(
                              user.uid,
                              message,
                              selectedDiscut.id
                            ); */
                            setMessageInput("");
                          }}
                        >
                          <FontAwesomeIcon icon={faPaperPlane} />
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
